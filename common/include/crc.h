#ifndef crc_h
#define crc_h

/* crc-byte-table automatic generation -------------------------------------*/
/** EXAMPLE: *****************************************************************
******************************************************************************
#define WIDTH_CRCXX  32U
#define POLY_CRCXX   0x04C11DB7
#define REFIN_CRCXX  true
uint32_t crc_poly = POLY_CRCXX;
// gen & print out at the console
crc_table_gen(
    WIDTH_CRCXX,
    (uint8_t *)(&crc_poly),
    REFIN_CRCXX);
******************************************************************************
*****************************************************************************/
/* propotypes --------------------------------------------------------------*/
/* reverse the binary order of a byte and return ---------------------------*/
uint8_t get_reverse_byte(uint8_t byte);
/* reverse the binary order of a byte and return ---------------------------*/

/* generate the crc-byte-table ---------------------------------------------*/
void crc_table_gen(
    uint8_t crc_width,
    uint8_t *poly,
    bool is_refin);
/* generate the crc-byte-table ---------------------------------------------*/
/* propotypes --------------------------------------------------------------*/
/* crc-byte-table automatic generation -------------------------------------*/

/* crc8 --------------------------------------------------------------------*/
/*****************************************************************************
    poly       : 0x07
    reversePoly: 0xE0
    init       : 0x00
    refIn      : false
    refOut     : false
    xorOut     : 0x00
*****************************************************************************/
/* init & xorout -----------------------------------------------------------*/
#define INIT_CRC8    0x00
#define XOROUT_CRC8  0x00
/* init & xorout -----------------------------------------------------------*/

/* single byte -------------------------------------------------------------*/
uint8_t update_crc8(
    uint8_t pre_crc,
    uint8_t ch);
/* single byte -------------------------------------------------------------*/

/* sequence ----------------------------------------------------------------*/
uint8_t crc8(
    uint8_t *arr,
    uint16_t arr_size);
/* sequence ----------------------------------------------------------------*/
/* crc8 --------------------------------------------------------------------*/

/* crc8_maxim --------------------------------------------------------------*/
/*****************************************************************************
    name       : CRC8_MAXIM
    poly       : 0x31
    reversePoly: 0x8C
    init       : 0x00
    refIn      : true
    refOut     : true
    xorOut     : 0x00
*****************************************************************************/
/* init & xorout -----------------------------------------------------------*/
#define INIT_CRC8_MAXIM    0x00
#define XOROUT_CRC8_MAXIM  0x00
/* init & xorout -----------------------------------------------------------*/

/* single byte -------------------------------------------------------------*/
uint8_t update_crc8_maxim(
    uint8_t pre_crc,
    uint8_t ch);
/* single byte -------------------------------------------------------------*/

/* sequence ----------------------------------------------------------------*/
uint8_t crc8_maxim(
    uint8_t *arr,
    uint16_t arr_size);
/* sequence ----------------------------------------------------------------*/
/* crc8_maxim --------------------------------------------------------------*/

/* crc16_maxim -------------------------------------------------------------*/
/****************************************************************************
    name       : CRC16_MAXIM
    poly       : 0x8005
    reversePoly: 0xA001
    init       : 0x0000
    refIn      : true
    refOut     : true
    xorOut     : 0xFFFF
*****************************************************************************/
/* init & xorout -----------------------------------------------------------*/
#define INIT_CRC16_MAXIM    0x0000
#define XOROUT_CRC16_MAXIM  0xFFFF
/* init & xorout -----------------------------------------------------------*/

/* single byte -------------------------------------------------------------*/
uint16_t update_crc16_maxim(
    uint16_t pre_crc,
    uint8_t ch);
/* single byte -------------------------------------------------------------*/

/* sequence ----------------------------------------------------------------*/
uint16_t crc16_maxim(
    uint8_t *arr,
    uint16_t arr_size);
/* sequence ----------------------------------------------------------------*/
/* crc16_maxim -------------------------------------------------------------*/

/* crc16_ccitt -------------------------------------------------------------*/
/*****************************************************************************
    name       : CRC16_CCITT
    poly       : 0x1021
    reversePoly: 0x8408
    init       : 0x0000
    refIn      : true
    refOut     : true
    xorOut     : 0x000
*****************************************************************************/
/* init & xorout -----------------------------------------------------------*/
#define INIT_CRC16_CCITT    0x0000
#define XOROUT_CRC16_CCITT  0x0000
/* init & xorout -----------------------------------------------------------*/

/* single byte -------------------------------------------------------------*/
uint16_t update_crc16_ccitt(
    uint16_t pre_crc,
    uint8_t ch);
/* single byte -------------------------------------------------------------*/

/* sequence ----------------------------------------------------------------*/
uint16_t crc16_ccitt(
    uint8_t *arr,
    uint16_t arr_size);
/* sequence ----------------------------------------------------------------*/
/* crc16_ccitt -------------------------------------------------------------*/

/* crc32 -------------------------------------------------------------------*/
/*****************************************************************************
    name       : CRC32
    poly       : 0x04C11DB7
    reversePoly: 0xEDB88320
    init       : 0xFFFFFFFF
    refIn      : True
    refOut     : True
    xorOut     : 0xFFFFFFFF
*****************************************************************************/
/* init & xorout -----------------------------------------------------------*/
#define INIT_CRC32    0xFFFFFFFF
#define XOROUT_CRC32  0xFFFFFFFF
/* init & xorout -----------------------------------------------------------*/

/* single byte -------------------------------------------------------------*/
uint32_t update_crc_32(
    uint32_t pre_crc,
    uint8_t ch);
/* single byte -------------------------------------------------------------*/

/* sequence ----------------------------------------------------------------*/
uint32_t crc32(
    uint8_t *arr,
    uint16_t arr_size);
/* sequence ----------------------------------------------------------------*/
/* crc32 -------------------------------------------------------------------*/

/* crc32_mpeg_2 ------------------------------------------------------------*/
/*****************************************************************************
    name       : CRC32_MPEG_2
    poly       : 0x04C11DB7
    reversePoly: 0xEDB88320
    init       : 0xFFFFFFFF
    refIn      : False
    refOut     : False
    xorOut     : 0x00000000
*****************************************************************************/
/* init & xorout -----------------------------------------------------------*/
#define INIT_CRC32_MPEG_2      0xFFFFFFFF
#define XOR_OUT_CRC32_MGEG_2   0x00000000
/* init & xorout -----------------------------------------------------------*/

/* single byte -------------------------------------------------------------*/
uint32_t update_crc32_mpeg_2(
    uint32_t pre_crc,
    uint8_t ch);
/* single byte -------------------------------------------------------------*/

uint32_t crc32_mpeg_2(
    uint8_t *arr,
    uint16_t arr_size);
/* crc32_mpeg_2 ------------------------------------------------------------*/

/* test area ---------------------------------------------------------------*/
/* crc table generator -----------------------------------------------------*/
#define WIDTH_CRCXX  16U
#define POLY_CRCXX   0x1021
#define REFIN_CRCXX  true
/* crc table generator -----------------------------------------------------*/

/* crc test handler --------------------------------------------------------*/
void crc_test_handler(void);
/* crc test handler --------------------------------------------------------*/
/* test area ---------------------------------------------------------------*/

#endif  /* crc_h */
